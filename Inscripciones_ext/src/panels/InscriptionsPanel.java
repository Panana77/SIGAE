/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels;

import datos.ActivityDAO;
import datos.CareerDAO;
import datos.Activity;
import editionOfDocuments.ExcelEdition;
import datos.Student;
import datos.StudentDAO;
import datos.Career;
import datos.ConectionToDB;
import datos.Credit;
import datos.CreditDAO;
import datos.Period;
import datos.PeriodDAO;
import editionOfDocuments.WordEdition;
import java.awt.CardLayout;
import java.awt.HeadlessException;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Panana
 */
public class InscriptionsPanel extends javax.swing.JPanel {

    //Modelo de la tabla donde se mostraran los registros
    private DefaultTableModel model;
    //id para identificar los registros
    int id;
    //Saber si se el panel de opciones avanzadas esta activada
    private boolean isAdvancedOptions;
    //Cardlayout para mostrar almacenar los paneles de opciones avanzadas
    private CardLayout cardLayoutAdvancedOptions = new CardLayout();
    //Arreglo para identificar los paneles para el uso del cardLayout
    final String[] PANELS_NAME = {"PANEL_CRUD", "PANEL_EXPORT_OPTIONS"};

    public InscriptionsPanel() {
        initComponents();
        
        //Desabilitar panel de opciones avanzadas para que no cuaquiera pueda acceder
        jpContainerAdvancedOptions.setVisible(false);
        
        //Asignar datos al componente jcbCarrera
        CareerDAO careerDAO = new CareerDAO();
        List<Career> careers = null;
        putDataInJComboBox(jcbCarrera, careers, careerDAO);
        
        //Asignar datos al componente jcActividad
        ActivityDAO activityDAO = new ActivityDAO();
        List<Activity> activities = null;
        putDataInJComboBox(jcbActivity, activities, activityDAO);
        //Asignar datos al componente jcbActivityList
        putDataInJComboBox(jcbActivityList, activities, activityDAO);
        //Asignar datos al componente jcbCarrierQualityFormats
        putDataInJComboBox(jcbCarrierQualityFormats, careers, careerDAO);
        //Asignar datos al componente jcbActivitiesQualityFormats
        putDataInJComboBox(jcbActivitiesQualityFormats, activities, activityDAO);
        
        //Asignar datos al componente jcbPeriod
        PeriodDAO _periodDAO = new PeriodDAO();
        List<Period> periods = _periodDAO.select();
        putDataInJComboBox(jcbPeriod, periods, _periodDAO);
        putDataInJComboBox(jcbPeriodQualityFormats, periods, _periodDAO);
        putDataInJComboBox(jcbPeriodStatistics, periods, _periodDAO);
        putDataInJComboBox(jcbPeriodList, periods, _periodDAO);
        putDataInJComboBox(jcbPeriod, periods, _periodDAO);
        //Colocar lista en jcbPeriodFilter
        for(Period period : periods)
        {
            jcbPeriodFilter.addItem(period.getPeriod());
        }
        //Configuracion de los paneles de opciones avanzadas
        jpContainerAdvancedOptions.setLayout(cardLayoutAdvancedOptions);
        jpContainerAdvancedOptions.add(PANELS_NAME[0], jpCrud);
        jpContainerAdvancedOptions.add(PANELS_NAME[1], jpExportOptions);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgSex = new javax.swing.ButtonGroup();
        jpForm = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        jlAge = new javax.swing.JLabel();
        jlSex = new javax.swing.JLabel();
        jlCarrera = new javax.swing.JLabel();
        jlControlNumber = new javax.swing.JLabel();
        jlSemester = new javax.swing.JLabel();
        jlActivity = new javax.swing.JLabel();
        jtfName = new javax.swing.JTextField();
        jtfAge = new javax.swing.JTextField();
        jrbMale = new javax.swing.JRadioButton();
        jrbFemale = new javax.swing.JRadioButton();
        jcbCarrera = new javax.swing.JComboBox<>();
        jtfNumberControl = new javax.swing.JTextField();
        jcbSemester = new javax.swing.JComboBox<>();
        jcbActivity = new javax.swing.JComboBox<>();
        jbAdvancedOptions = new javax.swing.JButton();
        jbRegister = new javax.swing.JButton();
        jlName1 = new javax.swing.JLabel();
        jtfLastName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jlActivity1 = new javax.swing.JLabel();
        jcbPeriod = new javax.swing.JComboBox<>();
        jbCleanDataInComponents = new javax.swing.JButton();
        jlName2 = new javax.swing.JLabel();
        jtfPhoneNumber = new javax.swing.JTextField();
        jlName3 = new javax.swing.JLabel();
        jtfEmail = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jpContainerAdvancedOptions = new javax.swing.JPanel();
        jpCrud = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtRegisters = new javax.swing.JTable();
        jpButtons = new javax.swing.JPanel();
        jbUpdate = new javax.swing.JButton();
        jbDelete = new javax.swing.JButton();
        jbSave = new javax.swing.JButton();
        jbExport = new javax.swing.JButton();
        jpFilter = new javax.swing.JPanel();
        jlSortBy = new javax.swing.JLabel();
        jcbSortBy = new javax.swing.JComboBox<>();
        jlFilterBy = new javax.swing.JLabel();
        jcbFilterBy = new javax.swing.JComboBox<>();
        jtfFilter = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jlTotalOfRegisters = new javax.swing.JLabel();
        jlFilterperiod = new javax.swing.JLabel();
        jcbPeriodFilter = new javax.swing.JComboBox<>();
        jpExportOptions = new javax.swing.JPanel();
        jTpExportType = new javax.swing.JTabbedPane();
        jpExportList = new javax.swing.JPanel();
        jbPreviousPanel = new javax.swing.JButton();
        jbExportCustomTable = new javax.swing.JButton();
        jbExportList = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jcbActivityList = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jtfTeacherName = new javax.swing.JTextField();
        jtfHorario = new javax.swing.JTextField();
        jcbPeriodList = new javax.swing.JComboBox<>();
        jpExportStatistics = new javax.swing.JPanel();
        jbPreviousPanel1 = new javax.swing.JButton();
        jbExportStatistics = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jcbPeriodStatistics = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jcbDayStatistics = new javax.swing.JComboBox<>();
        jcbMonthStatistics = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jcbYearStatistics = new javax.swing.JComboBox<>();
        jpExportQualityFormats = new javax.swing.JPanel();
        jbPreviousPanel2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jcbCarrierQualityFormats = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jcbActivitiesQualityFormats = new javax.swing.JComboBox<>();
        jbExportQualityFormat = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jcbPeriodQualityFormats = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jcbActivityTypeQualityFormats = new javax.swing.JComboBox<>();
        jpExportCredits = new javax.swing.JPanel();
        jbPreviousPanel3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jchbSelective = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaTextCredit = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jcbDayCredit = new javax.swing.JComboBox<>();
        jcbMonthCredit = new javax.swing.JComboBox<>();
        jcbYearCredit = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(246, 246, 246));
        setLayout(new java.awt.BorderLayout(6, 6));

        jpForm.setBackground(new java.awt.Color(252, 252, 252));

        jlName.setText("Nombre:");

        jlAge.setText("Edad:");

        jlSex.setText("Sexo: ");

        jlCarrera.setText("Carrera: ");

        jlControlNumber.setText("No. Control: ");

        jlSemester.setText("Semestre: ");

        jlActivity.setText("Actividad: ");

        jtfName.setToolTipText("Insertar nombre en mayusculas y SIN acentos");

        jtfAge.setToolTipText("Digite su edad");

        bgSex.add(jrbMale);
        jrbMale.setText("Masculino");
        jrbMale.setToolTipText("Sexo masculino");

        bgSex.add(jrbFemale);
        jrbFemale.setText("Femenino");
        jrbFemale.setToolTipText("Sexo femenino");

        jcbCarrera.setToolTipText("Elegir la carrera cursando");

        jtfNumberControl.setToolTipText("Digitar el numero de control");

        jcbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"}));
        jcbSemester.setToolTipText("Elegir el semestre actual");

        jcbActivity.setToolTipText("Elegir actividad extraescolar a cursar");

        jbAdvancedOptions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Options_icon.png"))); // NOI18N
        jbAdvancedOptions.setText("Opciones avanzadas");
        jbAdvancedOptions.setToolTipText("Menu de opciones avanzadas");
        jbAdvancedOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdvancedOptionsActionPerformed(evt);
            }
        });

        jbRegister.setBackground(new java.awt.Color(153, 153, 255));
        jbRegister.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addUser.png"))); // NOI18N
        jbRegister.setText("Inscribirse");
        jbRegister.setToolTipText("Inscribir alumno (Verificar bien los datos)");
        jbRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRegisterActionPerformed(evt);
            }
        });

        jlName1.setText("Apellidos:");

        jtfLastName.setToolTipText("Insertar apellidos en mayusculas y SIN acentos");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Datos Personales");

        jlActivity1.setText("período:");

        jcbPeriod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        jcbPeriod.setToolTipText("Elegir periodo actual");

        jbCleanDataInComponents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Clean_icon.png"))); // NOI18N
        jbCleanDataInComponents.setText("Limpiar campos");
        jbCleanDataInComponents.setToolTipText("Borrar datos de los campos");
        jbCleanDataInComponents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCleanDataInComponentsActionPerformed(evt);
            }
        });

        jlName2.setText("Telefono:");

        jtfPhoneNumber.setToolTipText("Insertar numero telefonico");

        jlName3.setText("Correo:");

        jtfEmail.setToolTipText("Insertar correo electronico");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Datos Academicos");

        javax.swing.GroupLayout jpFormLayout = new javax.swing.GroupLayout(jpForm);
        jpForm.setLayout(jpFormLayout);
        jpFormLayout.setHorizontalGroup(
            jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jpFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpFormLayout.createSequentialGroup()
                        .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpFormLayout.createSequentialGroup()
                                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jlName1, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                                    .addComponent(jlName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpFormLayout.createSequentialGroup()
                                        .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jlName2))
                                    .addGroup(jpFormLayout.createSequentialGroup()
                                        .addComponent(jtfLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jlName3)))
                                .addGap(18, 18, 18)
                                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtfEmail)
                                    .addComponent(jtfPhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpFormLayout.createSequentialGroup()
                                        .addComponent(jlSex)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jrbMale)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jrbFemale))
                                    .addGroup(jpFormLayout.createSequentialGroup()
                                        .addComponent(jlAge)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jtfAge, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jpFormLayout.createSequentialGroup()
                                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlActivity)
                                    .addComponent(jlCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(1, 1, 1)
                                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpFormLayout.createSequentialGroup()
                                        .addComponent(jcbActivity, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jlSemester)
                                        .addGap(18, 18, 18)
                                        .addComponent(jcbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jcbCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpFormLayout.createSequentialGroup()
                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpFormLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpFormLayout.createSequentialGroup()
                        .addGap(371, 371, 371)
                        .addComponent(jlActivity1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jcbPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jlControlNumber)
                        .addGap(13, 13, 13)
                        .addComponent(jtfNumberControl, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 70, Short.MAX_VALUE))
                    .addGroup(jpFormLayout.createSequentialGroup()
                        .addContainerGap(450, Short.MAX_VALUE)
                        .addComponent(jbCleanDataInComponents)
                        .addGap(18, 18, 18)
                        .addComponent(jbAdvancedOptions)
                        .addGap(18, 18, 18)
                        .addComponent(jbRegister)))
                .addContainerGap())
        );
        jpFormLayout.setVerticalGroup(
            jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpFormLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlName)
                    .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlName2)
                    .addComponent(jtfPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlSex)
                    .addComponent(jrbMale)
                    .addComponent(jrbFemale))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpFormLayout.createSequentialGroup()
                        .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlName1)
                            .addComponent(jtfLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlName3)
                            .addComponent(jtfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlAge))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpFormLayout.createSequentialGroup()
                        .addComponent(jtfAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlCarrera)
                    .addComponent(jcbCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlControlNumber)
                    .addComponent(jtfNumberControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlActivity1)
                    .addComponent(jcbPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbActivity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlActivity)
                    .addComponent(jlSemester)
                    .addComponent(jcbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAdvancedOptions)
                    .addComponent(jbRegister)
                    .addComponent(jbCleanDataInComponents))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jpForm, java.awt.BorderLayout.NORTH);

        jpContainerAdvancedOptions.setLayout(new java.awt.CardLayout());

        jpCrud.setBackground(new java.awt.Color(252, 252, 252));
        jpCrud.setLayout(new java.awt.BorderLayout());

        jtRegisters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Titulo1", "Titulo2", "Titulo3", "Titulo4"
            }
        ));
        jtRegisters.setToolTipText("Seleccionar una fila para modificar registro");
        jtRegisters.setShowGrid(true);
        jtRegisters.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtRegistersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtRegisters);

        jpCrud.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jpButtons.setBackground(new java.awt.Color(252, 252, 252));

        jbUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update_icon.png"))); // NOI18N
        jbUpdate.setText("Actualizar");
        jbUpdate.setToolTipText("Actualizar tabla");
        jbUpdate.setAlignmentX(0.5F);
        jbUpdate.setMaximumSize(new java.awt.Dimension(107, 21));
        jbUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpdateActionPerformed(evt);
            }
        });

        jbDelete.setBackground(new java.awt.Color(255, 102, 102));
        jbDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete_icon.png"))); // NOI18N
        jbDelete.setText("Eliminar");
        jbDelete.setToolTipText("Eliminar un registro seleccionado");
        jbDelete.setAlignmentX(0.5F);
        jbDelete.setMaximumSize(new java.awt.Dimension(107, 21));
        jbDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteActionPerformed(evt);
            }
        });

        jbSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save_icon (1).png"))); // NOI18N
        jbSave.setText("Guardar");
        jbSave.setToolTipText("Guargar un registro modificado");
        jbSave.setAlignmentX(0.5F);
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });

        jbExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/export_icon.png"))); // NOI18N
        jbExport.setText("Exportar");
        jbExport.setToolTipText("Opciones de exportación");
        jbExport.setAlignmentX(0.5F);
        jbExport.setMaximumSize(new java.awt.Dimension(107, 21));
        jbExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpButtonsLayout = new javax.swing.GroupLayout(jpButtons);
        jpButtons.setLayout(jpButtonsLayout);
        jpButtonsLayout.setHorizontalGroup(
            jpButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jbExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbSave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpButtonsLayout.setVerticalGroup(
            jpButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpButtonsLayout.createSequentialGroup()
                .addComponent(jbUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbExport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        jpCrud.add(jpButtons, java.awt.BorderLayout.WEST);

        jpFilter.setBackground(new java.awt.Color(252, 252, 252));

        jlSortBy.setText("Ordenar por: ");

        jcbSortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Id", "Nombre", "Apellido", "Edad", "Carrera", "Semestre", "Sexo"}));
        jcbSortBy.setToolTipText("ordenar registros de la tabla de forma personalizada");
        jcbSortBy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbSortByItemStateChanged(evt);
            }
        });

        jlFilterBy.setText("Filtrar por: ");

        jcbFilterBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Id", "Nombre", "Apellido", "Edad", "Sexo", "Carrera", "No. control", "Semestre", "Actividad"}));
        jcbFilterBy.setToolTipText("Filtrar registros especificados");
        jcbFilterBy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFilterByItemStateChanged(evt);
            }
        });

        jtfFilter.setToolTipText("Filtrar por un dato especifico");
        jtfFilter.setName(""); // NOI18N
        jtfFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfFilterActionPerformed(evt);
            }
        });

        jLabel1.setText("Total: ");

        jlTotalOfRegisters.setText("0");

        jlFilterperiod.setText("Periodo:");

        jcbPeriodFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"Todo"}));
        jcbPeriodFilter.setToolTipText("Filtrar registros por periodo");
        jcbPeriodFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPeriodFilterItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jpFilterLayout = new javax.swing.GroupLayout(jpFilter);
        jpFilter.setLayout(jpFilterLayout);
        jpFilterLayout.setHorizontalGroup(
            jpFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlTotalOfRegisters, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jlFilterperiod)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbPeriodFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlSortBy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlFilterBy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbFilterBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jtfFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpFilterLayout.setVerticalGroup(
            jpFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFilterLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jpFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlSortBy)
                    .addComponent(jcbSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlFilterBy)
                    .addComponent(jcbFilterBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jlTotalOfRegisters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlFilterperiod)
                    .addComponent(jcbPeriodFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4))
        );

        jtfFilter.getAccessibleContext().setAccessibleName("Filtrar por");

        jpCrud.add(jpFilter, java.awt.BorderLayout.PAGE_START);

        jpContainerAdvancedOptions.add(jpCrud, "card2");

        jpExportOptions.setBackground(new java.awt.Color(252, 252, 252));
        jpExportOptions.setLayout(new java.awt.BorderLayout());

        jpExportList.setBackground(new java.awt.Color(252, 252, 252));

        jbPreviousPanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/return_icon.png"))); // NOI18N
        jbPreviousPanel.setToolTipText("Regresar");
        jbPreviousPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPreviousPanelActionPerformed(evt);
            }
        });

        jbExportCustomTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/9112920_file_export_solid_icon.png"))); // NOI18N
        jbExportCustomTable.setText("Exportar Lista personalizada");
        jbExportCustomTable.setToolTipText("Exportar tabla personalizada de registros a un excel");
        jbExportCustomTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportCustomTableActionPerformed(evt);
            }
        });

        jbExportList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/9112920_file_export_solid_icon.png"))); // NOI18N
        jbExportList.setText("Exportar Lista");
        jbExportList.setToolTipText("Exportar lista de registros a un excel con formato");
        jbExportList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportListActionPerformed(evt);
            }
        });

        jLabel5.setText("Lista de actividades de: ");

        jcbActivityList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        jcbActivityList.setToolTipText("Elegir actividad extraescolar");

        jLabel6.setText("Período: ");
        jLabel6.setToolTipText("");

        jLabel7.setText("Profesor(A):");

        jLabel8.setText("Horario:");

        jtfTeacherName.setToolTipText("Insertar nombre del profesor");

        jtfHorario.setToolTipText("Insertar horario de actividades");

        jcbPeriodList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        jcbPeriodList.setToolTipText("Elegir período");

        javax.swing.GroupLayout jpExportListLayout = new javax.swing.GroupLayout(jpExportList);
        jpExportList.setLayout(jpExportListLayout);
        jpExportListLayout.setHorizontalGroup(
            jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpExportListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpExportListLayout.createSequentialGroup()
                        .addComponent(jbPreviousPanel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 664, Short.MAX_VALUE)
                        .addGroup(jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbExportCustomTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbExportList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jpExportListLayout.createSequentialGroup()
                        .addGroup(jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(jpExportListLayout.createSequentialGroup()
                                .addGroup(jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(21, 21, 21)
                                .addGroup(jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jtfTeacherName)
                                        .addComponent(jtfHorario)
                                        .addComponent(jcbActivityList, 0, 260, Short.MAX_VALUE))
                                    .addComponent(jcbPeriodList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 480, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpExportListLayout.setVerticalGroup(
            jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpExportListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jcbActivityList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbPeriodList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jtfTeacherName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jtfHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jbExportCustomTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpExportListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbExportList)
                    .addComponent(jbPreviousPanel))
                .addContainerGap())
        );

        jTpExportType.addTab("Listas", jpExportList);

        jpExportStatistics.setBackground(new java.awt.Color(252, 252, 252));
        jpExportStatistics.setToolTipText("");

        jbPreviousPanel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/return_icon.png"))); // NOI18N
        jbPreviousPanel1.setToolTipText("Regresar");
        jbPreviousPanel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPreviousPanel1ActionPerformed(evt);
            }
        });

        jbExportStatistics.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/9112920_file_export_solid_icon.png"))); // NOI18N
        jbExportStatistics.setText("Exportar estadísticas");
        jbExportStatistics.setToolTipText("Exportar tabla de estadisticas sobre los registros");
        jbExportStatistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportStatisticsActionPerformed(evt);
            }
        });

        jLabel11.setText("Período:");

        jcbPeriodStatistics.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        jcbPeriodStatistics.setToolTipText("Elegir período");

        jLabel18.setText("Fecha de elaboración el: ");

        jLabel19.setText("Día:");

        jcbDayStatistics.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "21", "22", "23", "24", "24", "25", "26", "27", "28", "29", "30", "31"}));
        jcbDayStatistics.setToolTipText("Elegir el día");

        jcbMonthStatistics.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO", "JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE" }));
        jcbMonthStatistics.setToolTipText("Elegir el mes");

        jLabel20.setText("Mes:");

        jLabel21.setText("Año:");

        jcbYearStatistics.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049" ,"2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060"}));
        jcbYearStatistics.setToolTipText("Elegir el año");

        javax.swing.GroupLayout jpExportStatisticsLayout = new javax.swing.GroupLayout(jpExportStatistics);
        jpExportStatistics.setLayout(jpExportStatisticsLayout);
        jpExportStatisticsLayout.setHorizontalGroup(
            jpExportStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpExportStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpExportStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpExportStatisticsLayout.createSequentialGroup()
                        .addComponent(jbPreviousPanel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbExportStatistics))
                    .addGroup(jpExportStatisticsLayout.createSequentialGroup()
                        .addGroup(jpExportStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpExportStatisticsLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(jcbPeriodStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpExportStatisticsLayout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel19)
                                .addGap(18, 18, 18)
                                .addComponent(jcbDayStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel20)
                                .addGap(18, 18, 18)
                                .addComponent(jcbMonthStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(jLabel21)
                                .addGap(18, 18, 18)
                                .addComponent(jcbYearStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 394, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpExportStatisticsLayout.setVerticalGroup(
            jpExportStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpExportStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpExportStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jcbPeriodStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpExportStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jcbDayStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbMonthStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21)
                    .addComponent(jcbYearStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addGroup(jpExportStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbPreviousPanel1)
                    .addComponent(jbExportStatistics))
                .addContainerGap())
        );

        jTpExportType.addTab("Estadísticas", jpExportStatistics);

        jpExportQualityFormats.setBackground(new java.awt.Color(252, 252, 252));

        jbPreviousPanel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/return_icon.png"))); // NOI18N
        jbPreviousPanel2.setToolTipText("Regresar");
        jbPreviousPanel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPreviousPanel2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Elegir carrera:");

        jcbCarrierQualityFormats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        jcbCarrierQualityFormats.setToolTipText("Elegir la carrera");

        jLabel9.setText("Elegir actividad:");

        jcbActivitiesQualityFormats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        jcbActivitiesQualityFormats.setToolTipText("Elegir la actividad");

        jbExportQualityFormat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/9112920_file_export_solid_icon.png"))); // NOI18N
        jbExportQualityFormat.setText("Exportar formato");
        jbExportQualityFormat.setToolTipText("Exportar Formato de Calidad");
        jbExportQualityFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportQualityFormatActionPerformed(evt);
            }
        });

        jLabel12.setText("Período:");

        jcbPeriodQualityFormats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        jcbPeriodQualityFormats.setToolTipText("Elegir período");

        jLabel2.setText("Tipo de actividad:");

        jcbActivityTypeQualityFormats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"CULTURAL","DEPORTIVA","CIVICA"}));
        jcbActivityTypeQualityFormats.setToolTipText("Elegir el tipo de actividad");

        javax.swing.GroupLayout jpExportQualityFormatsLayout = new javax.swing.GroupLayout(jpExportQualityFormats);
        jpExportQualityFormats.setLayout(jpExportQualityFormatsLayout);
        jpExportQualityFormatsLayout.setHorizontalGroup(
            jpExportQualityFormatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpExportQualityFormatsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpExportQualityFormatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpExportQualityFormatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbPreviousPanel2)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(jpExportQualityFormatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpExportQualityFormatsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbExportQualityFormat))
                    .addGroup(jpExportQualityFormatsLayout.createSequentialGroup()
                        .addGroup(jpExportQualityFormatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbCarrierQualityFormats, 0, 140, Short.MAX_VALUE)
                            .addComponent(jcbActivitiesQualityFormats, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbActivityTypeQualityFormats, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbPeriodQualityFormats, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 643, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpExportQualityFormatsLayout.setVerticalGroup(
            jpExportQualityFormatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpExportQualityFormatsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpExportQualityFormatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcbCarrierQualityFormats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpExportQualityFormatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jcbActivitiesQualityFormats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpExportQualityFormatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbActivityTypeQualityFormats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpExportQualityFormatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jcbPeriodQualityFormats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(jpExportQualityFormatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbExportQualityFormat)
                    .addComponent(jbPreviousPanel2))
                .addContainerGap())
        );

        jTpExportType.addTab("Formatos de calidad", jpExportQualityFormats);

        jpExportCredits.setBackground(new java.awt.Color(252, 252, 252));
        jpExportCredits.setToolTipText("");

        jbPreviousPanel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/return_icon.png"))); // NOI18N
        jbPreviousPanel3.setToolTipText("Regresar");
        jbPreviousPanel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPreviousPanel3ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/9112920_file_export_solid_icon.png"))); // NOI18N
        jButton2.setText("Exportar credito");
        jButton2.setToolTipText("Exportar credito");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jchbSelective.setText("Selectivo");
        jchbSelective.setToolTipText("Marcar si el estudiante pertenece al selectivo");
        jchbSelective.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jchbSelectiveStateChanged(evt);
            }
        });

        jtaTextCredit.setColumns(20);
        jtaTextCredit.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jtaTextCredit.setLineWrap(true);
        jtaTextCredit.setRows(5);
        jtaTextCredit.setToolTipText("Información del credito");
        jScrollPane2.setViewportView(jtaTextCredit);

        jLabel15.setText("Fecha de exportación de credito el: ");

        jLabel14.setText("Día:");

        jLabel16.setText("Año:");

        jLabel17.setText("Mes:");

        jcbDayCredit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "21", "22", "23", "24", "24", "25", "26", "27", "28", "29", "30", "31"}));
        jcbDayCredit.setToolTipText("Elegir el día");

        jcbMonthCredit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO", "JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE" }));
        jcbMonthCredit.setToolTipText("Elegir el mes");

        jcbYearCredit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049" ,"2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060"}));
        jcbYearCredit.setToolTipText("Elegir el año");

        jLabel13.setText("Pertenece a selectivo:");

        javax.swing.GroupLayout jpExportCreditsLayout = new javax.swing.GroupLayout(jpExportCredits);
        jpExportCredits.setLayout(jpExportCreditsLayout);
        jpExportCreditsLayout.setHorizontalGroup(
            jpExportCreditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpExportCreditsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpExportCreditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpExportCreditsLayout.createSequentialGroup()
                        .addComponent(jbPreviousPanel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(jpExportCreditsLayout.createSequentialGroup()
                        .addGroup(jpExportCreditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpExportCreditsLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jchbSelective))
                            .addGroup(jpExportCreditsLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbDayCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbMonthCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbYearCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 308, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpExportCreditsLayout.setVerticalGroup(
            jpExportCreditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpExportCreditsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpExportCreditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jchbSelective))
                .addGap(18, 18, 18)
                .addGroup(jpExportCreditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel14)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jcbDayCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbMonthCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbYearCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpExportCreditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbPreviousPanel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        jTpExportType.addTab("Creditos", jpExportCredits);

        jpExportOptions.add(jTpExportType, java.awt.BorderLayout.CENTER);

        jpContainerAdvancedOptions.add(jpExportOptions, "card3");

        add(jpContainerAdvancedOptions, java.awt.BorderLayout.CENTER);
        jpContainerAdvancedOptions.getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void jbUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpdateActionPerformed
        customSelect();
        cleanDataComponents();
    }//GEN-LAST:event_jbUpdateActionPerformed

    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
       try
       {
           int confirmSave = JOptionPane.showConfirmDialog(null, "¿Desea guardar cambios?");
           if(confirmSave == 0)
           {
               update(id);
               customSelect();
               JOptionPane.showMessageDialog(null, "Registro guardado con exito!");
               cleanDataComponents();
           }
       }
       catch(Exception ex)
       {
           JOptionPane.showMessageDialog(null, ex);
       }
       
    }//GEN-LAST:event_jbSaveActionPerformed

    private void jbDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteActionPerformed
        
        if (id != 0) 
        {
            int confirmDelete = JOptionPane.showConfirmDialog(null, "¿Desea eliminar este registro?");
            if (confirmDelete == 0) 
            {
                try 
                {

                    delete(id);
                    customSelect();
                    JOptionPane.showMessageDialog(null, "Registro eliminado con exito!");
                    cleanDataComponents();
                } catch (Exception ex) 
                {
                    JOptionPane.showMessageDialog(null, ex);
                }

            }
        } 
        else 
        {
            JOptionPane.showMessageDialog(null, "No ha seleccionado ningun registro");
        }
       
    }//GEN-LAST:event_jbDeleteActionPerformed

    private void jcbSortByItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbSortByItemStateChanged
        try
        {
             customSelect();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_jcbSortByItemStateChanged

    private void jcbFilterByItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFilterByItemStateChanged
        try
        {
             customSelect();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
        
       
    }//GEN-LAST:event_jcbFilterByItemStateChanged

    private void jtfFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfFilterActionPerformed
        try
        {
             customSelect();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_jtfFilterActionPerformed

    private void jbExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportActionPerformed
       //Mostrar el panel de opciones de exportacion
       cardLayoutAdvancedOptions.show(jpContainerAdvancedOptions, PANELS_NAME[1]);


    }//GEN-LAST:event_jbExportActionPerformed
//Exportar la lista 
    private void jbExportListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportListActionPerformed
        exportListFormat();
    }//GEN-LAST:event_jbExportListActionPerformed

    private void jbExportCustomTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportCustomTableActionPerformed
        //Exportar lista personalizada comforme a los filtros de la tabla
        exportCustomList();
    }//GEN-LAST:event_jbExportCustomTableActionPerformed

    private void jbPreviousPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPreviousPanelActionPerformed
        cardLayoutAdvancedOptions.show(jpContainerAdvancedOptions, PANELS_NAME[0]);
    }//GEN-LAST:event_jbPreviousPanelActionPerformed

//GEN-FIRST:event_jtRegistersMouseClicked
    //Colocar los datos del registro selecionado de la tabla a los campos de entrada del formulario
    private void jtRegistersMouseClicked(java.awt.event.MouseEvent evt)
    {
        PutDataOfStudentsInComponents();
    }
//GEN-LAST:event_jtRegistersMouseClicked

    private void jbPreviousPanel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPreviousPanel1ActionPerformed
                cardLayoutAdvancedOptions.show(jpContainerAdvancedOptions, PANELS_NAME[0]);
    }//GEN-LAST:event_jbPreviousPanel1ActionPerformed

    private void jbPreviousPanel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPreviousPanel2ActionPerformed
                cardLayoutAdvancedOptions.show(jpContainerAdvancedOptions, PANELS_NAME[0]);
    }//GEN-LAST:event_jbPreviousPanel2ActionPerformed

    private void jbExportStatisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportStatisticsActionPerformed
        exportStatisticsFormat();
    }//GEN-LAST:event_jbExportStatisticsActionPerformed

    private void jbExportQualityFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportQualityFormatActionPerformed
        exportQualityFormat();
    }//GEN-LAST:event_jbExportQualityFormatActionPerformed

    private void jbCleanDataInComponentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCleanDataInComponentsActionPerformed
        cleanDataComponents();
    }//GEN-LAST:event_jbCleanDataInComponentsActionPerformed

    private void jbRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRegisterActionPerformed
        //Confirmar si se desea registrar el alumno
        int confirmSubscribe = JOptionPane.showConfirmDialog(null, "¿Inscribir alumno?");
        //Si se confirma entonces se agregara a la base de datos
        if(confirmSubscribe == 0)
        {
            try
            {
                if(StudentDAO.selectCount(jcbActivity.getSelectedItem().toString()) >= ActivityDAO.selectLimitRegistration(jcbActivity.getSelectedItem().toString()))
                {
                    JOptionPane.showMessageDialog(null, "Numero de alumnos Inscritos: "+
                        StudentDAO.selectCount(jcbActivity.getSelectedItem().toString()) +"\nSin cupo");
                }
                else
                {
                    insert();
                    JOptionPane.showMessageDialog(null, "El alumno " + jtfLastName.getText().toUpperCase() + " " + jtfName.getText().toUpperCase() + "\nse ha inscrito con exito!");
                    //Limpiar los campos una vez instertados los datos
                     cleanDataComponents();
                }
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }//GEN-LAST:event_jbRegisterActionPerformed

    private void jbAdvancedOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdvancedOptionsActionPerformed
        //Solicitar la contraña para acceder a las opciones avanzadas
        String password = "";
        try
        {
            //Comprobar si ya estaba activado el panel de opciones avanzadas
            if (isAdvancedOptions == false)
            {
                    //Dar a conocer que el panel esta activo
                    isAdvancedOptions = true;
                    //activar el panel de opciones avanzadas
                    jpContainerAdvancedOptions.setVisible(isAdvancedOptions);
                    //Activar el panel por el cardlayout
                    cardLayoutAdvancedOptions.show(jpContainerAdvancedOptions, PANELS_NAME[0]);
                    //Mostrar todos los registros una vez que la contraseña sea correcta
                    select();
            } else
            {
                isAdvancedOptions = false;
                jpContainerAdvancedOptions.setVisible(isAdvancedOptions);
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_jbAdvancedOptionsActionPerformed

    private void jbPreviousPanel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPreviousPanel3ActionPerformed
        cardLayoutAdvancedOptions.show(jpContainerAdvancedOptions, PANELS_NAME[0]);
    }//GEN-LAST:event_jbPreviousPanel3ActionPerformed

    private void jcbPeriodFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPeriodFilterItemStateChanged
        try
        {
             customSelect();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_jcbPeriodFilterItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        exportCreditFormat();
    }//GEN-LAST:event_jButton2ActionPerformed
//cambiar el texto conforme a la seleccion del jchbSelective
    private void jchbSelectiveStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jchbSelectiveStateChanged

        try
        {
            jtaTextCredit.setText(generateTextCredit());
        }
        catch(Exception ex)
        {
           
        }
    }//GEN-LAST:event_jchbSelectiveStateChanged
   
    /**
     * Exportar formato de creditos
     */
    private void exportCreditFormat()
    {
        //Crear objeto para almacenar los datos en un word
        WordEdition createCredits = new WordEdition();
        //Crear objeton de CreditDAO
        CreditDAO creditDAO = new CreditDAO();
        try
        {
            //Asignar un nombre al archivo
            String fileName = null;
            fileName = JOptionPane.showInputDialog("Nombre del archivo:");
            
            //Comprobar si la cadena es diferente a null
            if(fileName != null)
            {
                //Insertar un registro en la tabla de credit
                Credit credit = new Credit();
                credit.setIdStudent(id);
                creditDAO.insert(credit);
                
                //Obtener todos los registros de la tabla credit para obtener el conteo total de alumnos con creditos exportados
                List<Credit> credits = creditDAO.select();            
                //Crear el archivo word
                createCredits.createCreditsFormat(fileName, Integer.parseInt(jcbDayCredit.getSelectedItem().toString()), 
                        jcbMonthCredit.getSelectedItem().toString(), Integer.parseInt(jcbYearCredit.getSelectedItem().toString()), 
                        jchbSelective.isSelected(), credits.size(), jtaTextCredit.getText());
                
                JOptionPane.showMessageDialog(null, "Archivo creado con exito!");

            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    /**
     * Regresar texto de credito a generar
     * @return regresar cadena texto que ira en el formato word
     */
    private String generateTextCredit()
    {
        //Almacenar los datos del estudiante elegido
        Student student = new Student();
        //Reiniciar a 0 la variable de id de estudiante
        id = 0;
        //Obtener el indice la fila seleccionada
        int row = jtRegisters.getSelectedRow();
        //Asignar al objeto Student los valores de cada columna seleccionado
        id = Integer.parseInt(String.valueOf(model.getValueAt(row, 0)));  
        student.setName (String.valueOf( model.getValueAt(row, 1)));
        student.setLastName(String.valueOf(model.getValueAt(row, 2)));
        student.setAge(Integer.parseInt(String.valueOf(model.getValueAt(row, 3))));
        student.setSex(String.valueOf(model.getValueAt(row, 4)));
        student.setIdCarrera(String.valueOf(model.getValueAt(row, 5)));
        student.setControlNumber(Integer.parseInt(String.valueOf(model.getValueAt(row, 6))));      
        student.setSemester(Integer.parseInt(String.valueOf(model.getValueAt(row, 7))));
        student.setActivity(String.valueOf(model.getValueAt(row, 8)));
        student.setIdPeriod(PeriodDAO.select_idPeriod(String.valueOf(model.getValueAt(row, 9))));
        student.setEmail(String.valueOf(model.getValueAt(row, 10)));
        student.setPhoneNumber(String.valueOf(model.getValueAt(row, 11)));
        if(jrbMale.isSelected())
        {
            student.setSex("M");
        }
        if(jrbFemale.isSelected())
        {
            student.setSex("F");
        }
        //Cadena que almacena el texto que va en el formato de word
        String textCredit = "";
        //Comprobar si pertenece al selectivo
        if(jchbSelective.isSelected())
        {
            textCredit = "El que suscribe ALEJANDRO FLORES REYES, por este medio me permito hacer de su conocimiento que el alumno(a) " + student.getLastName() + " " + student.getName() + " con número de control " + student.getControlNumber() + " de la Carrera " + getCareerNameWithOutId(student.getIdCarrera()) + " ha CUMPLIDO su actividad complementaria de extraescolares de SELECTIVO DE " + student.getActivity() + " durante el periodo escolar " + PeriodDAO.select_Period_name(student.getIdPeriod()) +", con valor curricular de 1 crédito.";
        }
        else
        {
            textCredit = "El que suscribe ALEJANDRO FLORES REYES, por este medio me permito hacer de su conocimiento que el alumno(a) " + student.getLastName() + " " + student.getName() + " con número de control " + student.getControlNumber() + " de la Carrera " + getCareerNameWithOutId(student.getIdCarrera()) + " ha CUMPLIDO su actividad complementaria de extraescolares de " + student.getActivity() + " durante el periodo escolar " + PeriodDAO.select_Period_name(student.getIdPeriod()) +", con valor curricular de 1 crédito.";

        }
        //Insertar el texto en el componente jtaTextCredit para visualización
        jtaTextCredit.setText(textCredit);
        //Regresar el texto con la información ya asignada
        return textCredit;
    }
    
    /**
     * Exportar formatos de calidad
     */
    private void exportQualityFormat() 
    {
        //Crear objeto para almacenar los datos en un word
        WordEdition createQualityFormat = new WordEdition();
        //Crear objeto de StudentDAO
        StudentDAO studentDAO = new StudentDAO();
        try 
        {
            //Asignar un nombre al archivo
            String fileName = null;
            fileName = JOptionPane.showInputDialog("Nombre del archivo: ");
            //Comprobar si la cadena es diferente de null
            if (fileName != null) 
            {
                //Lista donde se almacenaran los registros de la tabla
                List<Student> students = new ArrayList<>();
                String idCareer = "";
                //Obtener nombre de la carrera
                for(int i = 0; i < jcbCarrierQualityFormats.getSelectedItem().toString().length(); i++)
                {
                    if(jcbCarrierQualityFormats.getSelectedItem().toString().charAt(i) != ' ')
                    {
                        idCareer += jcbCarrierQualityFormats.getSelectedItem().toString().charAt(i);
                    }
                    else
                    {
                        break;
                    }
                }
                //Obtener los datos con filtro
                students = studentDAO.customSelect("lastname","idCareer", "activity_name", idCareer, 
                        jcbActivitiesQualityFormats.getSelectedItem().toString(), 
                        PeriodDAO.select_idPeriod(jcbPeriodQualityFormats.getSelectedItem().toString()));
                
                //Comprobar que la lista no este vacia
                if(students.size() != 0)
                {
                    //Crear el archivo word al que se le pasa el nombre del archivo y la lista de estudiantes
                    createQualityFormat.createQualityFormat(students, fileName, getCareerNameWithOutId(idCareer), jcbActivityTypeQualityFormats.getSelectedItem().toString());
                     JOptionPane.showMessageDialog(null, "Archivo creado con exito!");
                }
                else
                {
                    //En caso de que la lista este vacia devolvera mensaje de registros vacios
                    JOptionPane.showMessageDialog(null, "No existe registro de alumnos");
                }
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error, intentelo de nuevo");
        }

    }
    /**
     * Exportar Formato de estadisticas sobre el conteo de alumnos inscritos en actividades
     */
    private void exportStatisticsFormat()
    {
        //Asingar los nombres y id del periodo
        List<String> activityNames = new ArrayList<String>();
        List<String> activityCount = new ArrayList<String>();
        List<Activity> activities;
        int idPeriod;
        //Asignar un nombre al archivo
        String fileName = JOptionPane.showInputDialog("Nombre del archivo:");
        //Comprobar que el nombre es diferente a null
        if(fileName != null)
        {
            try
            {
                //Obtener el id del periodo
                idPeriod = PeriodDAO.select_idPeriod(jcbPeriodStatistics.getSelectedItem().toString());
                    
                //Obtener las estadisticas de los alumnos inscritos a actividades
                ActivityDAO activityDAO = new ActivityDAO();
                activities = activityDAO.select();
                for(Activity activity : activities)
                {
                    activityNames.add(activity.getActivityName());
                    //Obtener el conteo total de alumnos de la actividad seleccionada y asignarlo a activityCount
                    activityCount.add("" + StudentDAO.selectCount(idPeriod, activity.getActivityName()));
                }
                    
                //Crear el formato de estadisticas en un archivo word
                WordEdition wordEdition = new WordEdition();
                wordEdition.createStatisticsFormat(fileName, PeriodDAO.select_Period_name(idPeriod), 
                            activityNames, activityCount, jcbDayStatistics.getSelectedItem().toString(),
                            jcbMonthStatistics.getSelectedItem().toString(), jcbYearStatistics.getSelectedItem().toString());
            
                JOptionPane.showMessageDialog(null, "Archivo creado con exito!");

            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }
    
     /**
     * Exportar fomato de listas
     */
    public void exportListFormat()
    {
        //asignar un nombre a la lista
        String fileName = JOptionPane.showInputDialog("Nombre del archivo:");
        //Comprobar que el nombre sea diferente de null
        if(fileName != null)
        {
            try
            {
                StudentDAO studentDAO = new StudentDAO();
                ExcelEdition editList = new ExcelEdition();
                editList.modifyList(studentDAO.customSelect("lastname", "activity_name", jcbActivityList.getSelectedItem().toString(), PeriodDAO.select_idPeriod(jcbPeriodList.getSelectedItem().toString())),
                    fileName, jtfTeacherName.getText().toUpperCase(), jcbPeriodList.getSelectedItem().toString().toUpperCase(), jtfHorario.getText().toUpperCase(), jcbActivityList.getSelectedItem().toString());
                JOptionPane.showMessageDialog(null, "Archivo creado con exito!");
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, ex);
            }

        }
    }
    /** Insertar una lista de carreras en un JComBox
     * 
     * @param jcb Componente JComboBox
     * @param list Lista de tipo Career para ser mostrada en el JComboBox
     * @param careerDAO Objecto de tipo CareerDAO
     */
    private void putDataInJComboBox(javax.swing.JComboBox jcb, List<Career> list, CareerDAO careerDAO)
    {   
        //Asignar los datos de la carrera en una Lista
        list = careerDAO.select();
        //agregar el texto de instruccion seleccionar
        jcb.addItem("-Seleccionar carrera-");
      //agregar los tipos de carrera qe existen al jcomboBox
         for(Career career : list)
        {
            jcb.addItem(career.getIdCareer() + " : " + career.getCareerName());
        }
    }
    
    /** Insertar una lista de actividades en un JComBox
     * 
     * @param jcb Componente JComboBox
     * @param list Lista de tipo Activity para ser mostrada en el JComboBox
     * @param activityDAO Objecto de tipo ActivityDAO
     */
    private void putDataInJComboBox(javax.swing.JComboBox jcb, List<Activity> list, ActivityDAO activityDAO)
    {   
        //asignar los datos de las actividades en una Lista
        list = activityDAO.select();
        //agregar el texto de instruccion seleccionar
        jcb.addItem("-Seleccionar actividad-");
        //agregar los tipos de actividades qe existen al jcomboBox
         for(Activity activity : list)
        {
            jcb.addItem(activity.getActivityName());
        }
    }
    /** Insertar una lista de periodos en un JComboBox
     * 
     * @param jcb Componente JComboBox
     * @param list Lista de tipo period para ser mostrada en el JComboBox
     * @param periodDAO Objeto tipo PeriodDAO
     */
    private void putDataInJComboBox(javax.swing.JComboBox jcb, List<Period> list, PeriodDAO periodDAO)
    {   
        //asignar los datos de las actividades en una Lista
        list = periodDAO.select();
        //agregar el texto de instruccion seleccionar
        jcb.addItem("-Seleccionar periodo-");
        //agregar los tipos de actividades qe existen al jcomboBox
         for(Period period : list)
        {
            jcb.addItem(period.getPeriod());
        }
    }
    //Exportar listas personalizadas en excel
    private void exportCustomList() 
    {
        ExcelEdition createList = new ExcelEdition();
        try 
        {
            //Darle un nombre al archivo
            String fileName = null;
            fileName = JOptionPane.showInputDialog("Nombre del archivo: ");
            //Comprobar si el nombre es diferente de null
            if (fileName != null) 
            {
                //Lista donde se almacenaran los registros de la tabla
                List<Student> students = new ArrayList<>();
                //Cliclo para asignar los datos de los registros al objeto de la clase Student y luego al arreglos students
                for (int i = 0; i < model.getRowCount(); i++) 
                {
                    //Asignar los datos a Student
                    Student _student = new Student();
                    _student.setName(String.valueOf(model.getValueAt(i, 1)));
                    _student.setLastName(String.valueOf(model.getValueAt(i, 2)));
                    _student.setAge(Integer.parseInt(String.valueOf(model.getValueAt(i, 3))));
                    _student.setSex(String.valueOf(model.getValueAt(i, 4)));
                    _student.setIdCarrera(CareerDAO.select_Career_name(String.valueOf(model.getValueAt(i, 5))));
                    _student.setControlNumber(Integer.parseInt(String.valueOf(model.getValueAt(i, 6))));
                    _student.setSemester(Integer.parseInt(String.valueOf(model.getValueAt(i, 7))));
                    _student.setActivity(String.valueOf(model.getValueAt(i, 8)));
                    //Agregar el objeto al arreglo students
                    students.add(_student);
                }
                //Metodo para crear el archivo excel al que se le pasa el nombre del archivo y la lista de estudiantes
                createList.createList(students, fileName);
                JOptionPane.showMessageDialog(null, "¡Lista creada con exito!");
            }

        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }

    }
    /** Devolver el id de la carrera concatenado con el nombre de la carrera
     * 
     * @param idCareer Pasar el id de la carrera
     * @return Regresa una cadena del id concatenado con el nombre de la carrera
     */
    private String getCareerNameWithId(String idCareer)
    {
        CareerDAO careerDAO = new CareerDAO();
        List<Career> careers = careerDAO.select();
        String careerName = "";
        
        for(Career career : careers)
        {
            if(idCareer.equals(career.getIdCareer()))
            {
                careerName = career.getIdCareer() + " : " + career.getCareerName();
                break;
            }
        }
        
        return careerName;
    }
    /**Devolver el nombre de la carrera sin el id concatenado
     * 
     * @param idCareer Pasar el id de la carrera
     * @return Regresa una cadena del solo el nombre de la carrera
     */
   private String getCareerNameWithOutId(String idCareer)
    {
        CareerDAO careerDAO = new CareerDAO();
        List<Career> careers = careerDAO.select();
        String careerName = "";
        
        for(Career career : careers)
        {
            if(idCareer.equals(career.getIdCareer()))
            {
                careerName = career.getCareerName();
                break;
            }
        }
        
        return careerName;
    }    
    //limpiar valores de los componentes del formulario
    private void cleanDataComponents()
    {
        jtfAge.setText(null);
        jtfFilter.setText(null);
        jtfLastName.setText(null);
        jtfName.setText(null);
        jtfNumberControl.setText(null);
        jcbActivity.setSelectedIndex(0);
        jcbCarrera.setSelectedIndex(0);
        jcbPeriod.setSelectedIndex(0);
        jcbSemester.setSelectedIndex(0);
        jtfEmail.setText(null);
        jtfPhoneNumber.setText(null);
        id = 0;
    }
    /**
     * Obtener el id de la carrera sin el nombre en base al componente jcbCarrera
     * @return regresa el id de la carrera
     */
   private String getIdCareerWithOutName()
    {   
        String idCareer = "";
        //Ciclo para seperar las primeras letras del texto seleccionado 
        for(int i = 0; i < 3; i++)
        {
            if(jcbCarrera.getSelectedItem().toString().charAt(i) == ' ')
            {
                continue;
            }
            else 
            {
                idCareer += jcbCarrera.getSelectedItem().toString().charAt(i);
            }
            
        }
        return idCareer;
    }
    /**
     * Insertar el registro seleccionado de la tabla en los campos de entrada del formulario
     */
    public void PutDataOfStudentsInComponents()
    {
        Student _student = new Student();
        id = 0;
        //Obtener el la fila seleccionada
        int row = jtRegisters.getSelectedRow();
        //Asignar al objeto Student los valores de cada columna seleccionada
        id = Integer.parseInt(String.valueOf(model.getValueAt(row, 0)));  
        _student.setName (String.valueOf( model.getValueAt(row, 1)));
        _student.setLastName(String.valueOf(model.getValueAt(row, 2)));
        _student.setAge(Integer.parseInt(String.valueOf(model.getValueAt(row, 3))));
        _student.setSex(String.valueOf(model.getValueAt(row, 4)));
        _student.setIdCarrera(String.valueOf(model.getValueAt(row, 5)));
        _student.setControlNumber(Integer.parseInt(String.valueOf(model.getValueAt(row, 6))));      
        _student.setSemester(Integer.parseInt(String.valueOf(model.getValueAt(row, 7))));
        _student.setActivity(String.valueOf(model.getValueAt(row, 8)));
        _student.setIdPeriod(PeriodDAO.select_idPeriod(String.valueOf(model.getValueAt(row, 9))));
        _student.setEmail(String.valueOf(model.getValueAt(row, 10)));
        _student.setPhoneNumber(String.valueOf(model.getValueAt(row, 11)));
        //Asignar a los componentes los valores de estudiante para editarlos
        jtfName.setText(_student.getName());
        jtfLastName.setText(_student.getLastName());
        jtfAge.setText(String.valueOf(_student.getAge()));
        jtfNumberControl.setText(String.valueOf(_student.getControlNumber()));
        jcbCarrera.setSelectedItem(getCareerNameWithId(_student.getIdCarrera()));
        jcbSemester.setSelectedItem(String.valueOf(_student.getSemester()));
        jcbActivity.setSelectedItem(_student.getActivity());
        jcbPeriod.setSelectedItem(PeriodDAO.select_Period_name(_student.getIdPeriod()));
        jtfEmail.setText(_student.getEmail());
        jtfPhoneNumber.setText(_student.getPhoneNumber());
        //colocar el sexo del registro
        if(_student.getSex().equals("M"))
        {
            jrbMale.setSelected(true);
        }
        else if(_student.getSex().equals("F"))
        {
            jrbFemale.setSelected(true);
        }
        
        //Colocar información en el jtaCredit para la expedición de creditos
        jtaTextCredit.setText(generateTextCredit());
        
    }
    //Metodo para filtrar los registros en la tabla con un orden personalizado
    private void customSelect()
    {
         //Construccion de la tabla
        model = new DefaultTableModel();
        StudentDAO studenDAO = new StudentDAO();
        jtRegisters.setModel(model);
        
        //Variables que serviran como filtros para colocar en la consulta sql
        String orderBy = "";
        String filterBy = "";
        String filter = jtfFilter.getText();
        //Condicionales para ordenar la tabla 
        if(jcbSortBy.getSelectedItem().toString().equals("Id"))
        {
            orderBy = "idstudent";
        }
        else if(jcbSortBy.getSelectedItem().toString().equals("Nombre"))
        {
            orderBy = "name";
        }
        else if(jcbSortBy.getSelectedItem().toString().equals("Edad"))
        {
            orderBy = "age";
        }
        else if(jcbSortBy.getSelectedItem().toString().equals("Apellido"))
        {
            orderBy = "lastname";
        }
        else if(jcbSortBy.getSelectedItem().toString().equals("Carrera"))
        {
            orderBy = "idCareer";
        }
        else if(jcbSortBy.getSelectedItem().toString().equals("Semestre"))
        {
            orderBy = "semester";
        }
        else if(jcbSortBy.getSelectedItem().toString().equals("Sexo"))
        {
            orderBy = "idsex";
        }
        
        //Condicionales para filtrar la tabla
        if(jcbFilterBy.getSelectedItem().toString().equals("Id"))
        {
            filterBy = "idstudent";
        }
        else if(jcbFilterBy.getSelectedItem().toString().equals("Nombre"))
        {
            filterBy = "name";
        }
        else if(jcbFilterBy.getSelectedItem().toString().equals("Apellido"))
        {
            filterBy = "lastname";
        }
        else if(jcbFilterBy.getSelectedItem().toString().equals("Edad"))
        {
            filterBy = "age";
        }
        else if(jcbFilterBy.getSelectedItem().toString().equals("Sexo"))
        {
            filterBy = "idsex";
        }
        else if(jcbFilterBy.getSelectedItem().toString().equals("Carrera"))
        {
            filterBy = "idcareer";
        }
        else if(jcbFilterBy.getSelectedItem().toString().equals("No. control"))
        {
            filterBy = "ctrlNumber";
        }
        else if(jcbFilterBy.getSelectedItem().toString().equals("Semestre"))
        {
            filterBy = "semester";
        }
        else if(jcbFilterBy.getSelectedItem().toString().equals("Actividad"))
        {
            filterBy = "activity_name";
        }
        else if(jcbFilterBy.getSelectedItem().toString().equals("Periodo"))
        {
           filterBy = "period_name";
        }
        //Crear la lista que almacenara todos los datos de los estudiantes
        List<Student> students = null;
        //Comprobar si se desea consultar todos los estudiantes de todos los periodos
        if(jcbPeriodFilter.getSelectedItem().toString().equals("Todo"))
        {
            //Pasar un 0 como idperiod ya que ese id no existe en la tabla period, por tanto servira como
            //indicador para dar a conocer que se desean seleccionar todos los registros sin importar el periodo
             students = studenDAO.customSelect(orderBy, filterBy, filter, 0);
        }
        else
        {
            //Pasar el id existente en la tabla en caso de que no se desea seleccionar todos los periodos
            students = studenDAO.customSelect(orderBy, filterBy, filter, 
                PeriodDAO.select_idPeriod(jcbPeriodFilter.getSelectedItem().toString()));
        }
        
        //Asignando nombre a las columnas
        showRegistersInTable(students, model);
    }
    //metodo para mostrar los registros en la tabla
    private void select()
    {
         //Construccion de la tabla
        model = new DefaultTableModel();
        StudentDAO studenDAO = new StudentDAO();
        jtRegisters.setModel(model);
        
        //Creacion de la lista que almacenara los datos de los estudiantes
        List<Student> students = studenDAO.select();
        //LLamar metodo para mostrar registros en la tabla
        showRegistersInTable(students, model);              
        

    }
    //Metodo para insertar registros en la base de datos
    private void insert()
    {
        try 
        {
            //Insertar los datos a un objeto de la clase Student
            Student _student = new Student();
            _student.setName(jtfName.getText());
            _student.setLastName(jtfLastName.getText());
            _student.setAge(Integer.parseInt(jtfAge.getText()));  
            _student.setIdCarrera(getIdCareerWithOutName());
            _student.setControlNumber(Integer.parseInt(jtfNumberControl.getText()));
            _student.setSemester(Integer.parseInt(jcbSemester.getSelectedItem().toString()));
            _student.setEmail(jtfEmail.getText());
            _student.setPhoneNumber(jtfPhoneNumber.getText());
            //Saber que radio button esta seleccionado
            if(jrbMale.isSelected())
            {
                _student.setSex("M");
            }
            else if(jrbFemale.isSelected())
            {
                _student.setSex("F");
            }
            _student.setActivity(jcbActivity.getSelectedItem().toString());
            //agregar el id del periodo desde la clase PerioDAO
            _student.setIdPeriod(PeriodDAO.select_idPeriod(jcbPeriod.getSelectedItem().toString()));
            
            //Pasar la Lista a la clase StudentDAO para agreagar el registro a la base de datos
            StudentDAO studentDAO = new StudentDAO();
            studentDAO.insert(_student);
        } 
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(null, "Verifique los datos");
        }
    }
    //Metodo para actualizar registros de la base de datos
    private void update(int id)
    {
        //Insertar los datos a un objeto de la clase Student
        Student _student = new Student();
        _student.setName(jtfName.getText());
        _student.setLastName(jtfLastName.getText());
        _student.setAge(Integer.parseInt(jtfAge.getText()));
        _student.setIdCarrera(getIdCareerWithOutName());
        _student.setControlNumber(Integer.parseInt(jtfNumberControl.getText()));
        _student.setSemester(Integer.parseInt(jcbSemester.getSelectedItem().toString()));
        _student.setEmail(jtfEmail.getText());
        _student.setPhoneNumber(jtfPhoneNumber.getText());
         //Saber que radio button esta seleccionado para asignar el sexo
         if(jrbMale.isSelected())
         {
             _student.setSex("M");
         }
         else if(jrbFemale.isSelected())
         {
             _student.setSex("F");
         }
        
        _student.setActivity(jcbActivity.getSelectedItem().toString());
        _student.setIdPeriod(PeriodDAO.select_idPeriod(jcbPeriod.getSelectedItem().toString()));
        //Dar el objeto _student a la clase update de studentDAO
        StudentDAO studentDAO = new StudentDAO();
        studentDAO.update(_student, id);
    }
    //Metodo para eliminar registros de la base de datos
    private void delete(int id)
    {
        StudentDAO studentDAO = new StudentDAO();
        //Llamar al metodo delete
        studentDAO.delete(id);
        //Reiniciar el id a cero
        id = 0;
    }
    //Metodo para mostrar todos los registros en la tabla de la interfaz
    private void showRegistersInTable(List<Student> students, DefaultTableModel model)
    {
        //Asignando nombre a las columnas
        String columnName[] = {"Id", "nombre", "Apellido", "Edad", "Sexo", "Carrera", "No. Control", "Semestre", "Actividad","Periodo", "Email", "Telefono"};
        model.setColumnIdentifiers(columnName);
        //Ciclo para mostrar los datos de los estudiantes en la tabla
        for (Student student : students) 
        {
            //Obtener los datos de la clase Student
           Object studentData[] = {student.getID(), student.getName(), student.getLastName(), student.getAge(),
           student.getSex(), student.getIdCarrera(), student.getControlNumber(), student.getSemester(),
           student.getActivity(), PeriodDAO.select_Period_name(student.getIdPeriod()), student.getEmail(), 
           student.getPhoneNumber()};          
           model.addRow(studentData); 
        }
        //Mostrar el total de registros en un jlabel
         jlTotalOfRegisters.setText(String.valueOf(model.getRowCount()));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgSex;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTpExportType;
    private javax.swing.JButton jbAdvancedOptions;
    private javax.swing.JButton jbCleanDataInComponents;
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbExport;
    private javax.swing.JButton jbExportCustomTable;
    private javax.swing.JButton jbExportList;
    private javax.swing.JButton jbExportQualityFormat;
    private javax.swing.JButton jbExportStatistics;
    private javax.swing.JButton jbPreviousPanel;
    private javax.swing.JButton jbPreviousPanel1;
    private javax.swing.JButton jbPreviousPanel2;
    private javax.swing.JButton jbPreviousPanel3;
    private javax.swing.JButton jbRegister;
    private javax.swing.JButton jbSave;
    private javax.swing.JButton jbUpdate;
    private javax.swing.JComboBox<String> jcbActivitiesQualityFormats;
    private javax.swing.JComboBox<String> jcbActivity;
    private javax.swing.JComboBox<String> jcbActivityList;
    private javax.swing.JComboBox<String> jcbActivityTypeQualityFormats;
    private javax.swing.JComboBox<String> jcbCarrera;
    private javax.swing.JComboBox<String> jcbCarrierQualityFormats;
    private javax.swing.JComboBox<String> jcbDayCredit;
    private javax.swing.JComboBox<String> jcbDayStatistics;
    private javax.swing.JComboBox<String> jcbFilterBy;
    private javax.swing.JComboBox<String> jcbMonthCredit;
    private javax.swing.JComboBox<String> jcbMonthStatistics;
    private javax.swing.JComboBox<String> jcbPeriod;
    private javax.swing.JComboBox<String> jcbPeriodFilter;
    private javax.swing.JComboBox<String> jcbPeriodList;
    private javax.swing.JComboBox<String> jcbPeriodQualityFormats;
    private javax.swing.JComboBox<String> jcbPeriodStatistics;
    private javax.swing.JComboBox<String> jcbSemester;
    private javax.swing.JComboBox<String> jcbSortBy;
    private javax.swing.JComboBox<String> jcbYearCredit;
    private javax.swing.JComboBox<String> jcbYearStatistics;
    private javax.swing.JCheckBox jchbSelective;
    private javax.swing.JLabel jlActivity;
    private javax.swing.JLabel jlActivity1;
    private javax.swing.JLabel jlAge;
    private javax.swing.JLabel jlCarrera;
    private javax.swing.JLabel jlControlNumber;
    private javax.swing.JLabel jlFilterBy;
    private javax.swing.JLabel jlFilterperiod;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlName1;
    private javax.swing.JLabel jlName2;
    private javax.swing.JLabel jlName3;
    private javax.swing.JLabel jlSemester;
    private javax.swing.JLabel jlSex;
    private javax.swing.JLabel jlSortBy;
    private javax.swing.JLabel jlTotalOfRegisters;
    private javax.swing.JPanel jpButtons;
    private javax.swing.JPanel jpContainerAdvancedOptions;
    private javax.swing.JPanel jpCrud;
    private javax.swing.JPanel jpExportCredits;
    private javax.swing.JPanel jpExportList;
    private javax.swing.JPanel jpExportOptions;
    private javax.swing.JPanel jpExportQualityFormats;
    private javax.swing.JPanel jpExportStatistics;
    private javax.swing.JPanel jpFilter;
    private javax.swing.JPanel jpForm;
    private javax.swing.JRadioButton jrbFemale;
    private javax.swing.JRadioButton jrbMale;
    private javax.swing.JTable jtRegisters;
    private javax.swing.JTextArea jtaTextCredit;
    private javax.swing.JTextField jtfAge;
    private javax.swing.JTextField jtfEmail;
    private javax.swing.JTextField jtfFilter;
    private javax.swing.JTextField jtfHorario;
    private javax.swing.JTextField jtfLastName;
    private javax.swing.JTextField jtfName;
    private javax.swing.JTextField jtfNumberControl;
    private javax.swing.JTextField jtfPhoneNumber;
    private javax.swing.JTextField jtfTeacherName;
    // End of variables declaration//GEN-END:variables
}
